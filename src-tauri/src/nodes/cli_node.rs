use std::process::Command;
use serde_json::json;

#[cfg(target_os = "windows")]
use std::os::windows::process::CommandExt;

#[tauri::command]
pub fn cli_node(command: String) -> Result<String, String> {
    println!("üñ•Ô∏è CLI Node executing command: '{}'", command);

    // ÏûÖÎ†•Í∞í Í≤ÄÏ¶ù
    if command.trim().is_empty() {
        return Err("EMPTY_COMMAND".to_string());
    }

    // Î≥¥ÏïàÏùÑ ÏúÑÌï¥ ÏúÑÌóòÌïú Î™ÖÎ†πÏñ¥Îì§ ÌïÑÌÑ∞ÎßÅ
    let dangerous_commands = [
        "rm -rf", "del /f", "format", "shutdown", "reboot", 
        "sudo rm", "rmdir /s", "deltree", "fdisk"
    ];
    
    let command_lower = command.to_lowercase();
    for dangerous in &dangerous_commands {
        if command_lower.contains(dangerous) {
            println!("üö´ Dangerous command blocked: {}", dangerous);
            return Err(format!("DANGEROUS_COMMAND_BLOCKED: {}", dangerous));
        }
    }

    // WindowsÏôÄ Unix Í≥ÑÏó¥ Ïö¥ÏòÅÏ≤¥Ï†úÏóê Îî∞Îùº Îã§Î•∏ Î™ÖÎ†πÏñ¥ Ïã§Ìñâ
    let output = if cfg!(target_os = "windows") {
        #[cfg(target_os = "windows")]
        {
            Command::new("cmd")
                .raw_arg("/C")
                .raw_arg(&command)
                .output()
        }
        #[cfg(not(target_os = "windows"))]
        {
            unreachable!()
        }
    } else {
        Command::new("sh")
            .args(["-c", &command])
            .output()
    };

    match output {
        Ok(output) => {
            let stdout = String::from_utf8_lossy(&output.stdout);
            let stderr = String::from_utf8_lossy(&output.stderr);
            let exit_code = output.status.code().unwrap_or(-1);
            
            // ÎîîÎ≤ÑÍπÖ Ï†ïÎ≥¥ Ï∂úÎ†•
            println!("üìã Command executed: {}", command);
            println!("üì§ Exit code: {}", exit_code);
            println!("üìú Stdout length: {} chars", stdout.len());
            println!("‚ö†Ô∏è Stderr length: {} chars", stderr.len());
            
            // Í≤∞Í≥º Í≤∞Ï†ï
            let final_output = if !stderr.is_empty() && exit_code != 0 {
                // Ïã§Ï†ú ÏóêÎü¨Ïù∏ Í≤ΩÏö∞
                return Err(format!("COMMAND_FAILED: {}", stderr.trim()));
            } else if !stderr.is_empty() && !stdout.is_empty() {
                // Í≤ΩÍ≥†Í∞Ä ÏûàÏßÄÎßå ÏÑ±Í≥µÌïú Í≤ΩÏö∞
                format!("{}\n[Warning: {}]", stdout.trim(), stderr.trim())
            } else if stdout.is_empty() && stderr.is_empty() {
                // Ï∂úÎ†•Ïù¥ ÏóÜÎäî ÏÑ±Í≥µÏ†ÅÏù∏ Î™ÖÎ†πÏñ¥
                "Command executed successfully (no output)".to_string()
            } else {
                // Ï†ïÏÉÅÏ†ÅÏù∏ Ï∂úÎ†•
                stdout.trim().to_string()
            };

            println!("‚úÖ Command completed successfully");

            // JSON ÌòïÌÉúÎ°ú Í≤∞Í≥º Î∞òÌôò (FileCreator Ìå®ÌÑ¥Í≥º ÎèôÏùº)
            let result = json!({
                "output": final_output,
                "command": command,
                "exitCode": exit_code,
                "hasStderr": !stderr.is_empty(),
                "outputLength": final_output.len()
            });

            Ok(result.to_string())
        }
        Err(e) => {
            println!("‚ùå CLI command execution failed: {}", e);
            Err(format!("EXECUTION_ERROR: {}", e))
        }
    }
}