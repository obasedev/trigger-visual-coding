// src-tauri/src/nodes/cli_node.rs

use std::process::Command;

#[tauri::command]
pub fn cli_node(command: String) -> Result<String, String> {
    println!("üñ•Ô∏è Executing CLI command: {}", command);

    // Î≥¥ÏïàÏùÑ ÏúÑÌï¥ ÏúÑÌóòÌïú Î™ÖÎ†πÏñ¥Îì§ ÌïÑÌÑ∞ÎßÅ
    let dangerous_commands = ["rm -rf", "del /f", "format", "shutdown", "reboot"];
    for dangerous in &dangerous_commands {
        if command.to_lowercase().contains(dangerous) {
            return Err(format!("Dangerous command blocked: {}", dangerous));
        }
    }

    // WindowsÏôÄ Unix Í≥ÑÏó¥ Ïö¥ÏòÅÏ≤¥Ï†úÏóê Îî∞Îùº Îã§Î•∏ Î™ÖÎ†πÏñ¥ Ïã§Ìñâ
    let output = if cfg!(target_os = "windows") {
        Command::new("cmd")
            .args(["/C", &command])
            .output()
    } else {
        Command::new("sh")
            .args(["-c", &command])
            .output()
    };

    match output {
        Ok(output) => {
            let stdout = String::from_utf8_lossy(&output.stdout);
            let stderr = String::from_utf8_lossy(&output.stderr);
            
            // ÎîîÎ≤ÑÍπÖ Ï†ïÎ≥¥ Ï∂úÎ†•
            println!("üìã Command: {}", command);
            println!("üì§ Exit code: {}", output.status.code().unwrap_or(-1));
            println!("üìú Stdout: '{}'", stdout);
            println!("‚ö†Ô∏è Stderr: '{}'", stderr);
            
            if !stderr.is_empty() {
                // stderrÍ∞Ä ÏûàÏßÄÎßå stdoutÎèÑ ÏûàÏúºÎ©¥ Í≤ΩÍ≥†Î°ú Ï≤òÎ¶¨
                if !stdout.is_empty() {
                    Ok(format!("{}\n(Warning: {})", stdout, stderr))
                } else {
                    // stderrÎßå ÏûàÏúºÎ©¥ ÏóêÎü¨Î°ú Ï≤òÎ¶¨
                    Err(format!("Command failed: {}", stderr))
                }
            } else if stdout.is_empty() {
                // stdoutÏù¥ ÎπÑÏñ¥ÏûàÏúºÎ©¥ ÏÑ±Í≥µ Î©îÏãúÏßÄ
                Ok("Command executed successfully (no output)".to_string())
            } else {
                // Ï†ïÏÉÅÏ†ÅÏù∏ Ï∂úÎ†•
                Ok(stdout.to_string())
            }
        }
        Err(e) => {
            println!("‚ùå CLI command failed: {}", e);
            Err(format!("Failed to execute command: {}", e))
        }
    }
}